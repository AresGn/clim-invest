import axios from 'axios';

// Configuration Axios robuste
const weatherAPI = axios.create({
  timeout: 15000, // 15 secondes timeout
  headers: {
    'Content-Type': 'application/json',
    'User-Agent': 'ClimInvest-App/1.0'
  }
});

export class WeatherService {
  // üî• M√âTHODE CORRECTE - Open-Meteo Forecast API avec fallback
  static async getCurrentWeather(latitude: number, longitude: number) {
    try {
      console.log(`üå§Ô∏è R√©cup√©ration m√©t√©o actuelle pour (${latitude}, ${longitude})`);

      const response = await weatherAPI.get('https://api.open-meteo.com/v1/forecast', {
        params: {
          latitude: latitude.toFixed(6),
          longitude: longitude.toFixed(6),
          current: [
            'temperature_2m',
            'relative_humidity_2m',
            'precipitation',
            'wind_speed_10m',
            'weather_code'
          ].join(','),
          hourly: [
            'temperature_2m',
            'precipitation',
            'wind_speed_10m'
          ].join(','),
          daily: [
            'temperature_2m_max',
            'temperature_2m_min',
            'precipitation_sum'
          ].join(','),
          timezone: 'auto',
          forecast_days: 7
        }
      });

      console.log('‚úÖ M√©t√©o actuelle r√©cup√©r√©e avec succ√®s');
      return {
        current: response.data.current,
        hourly: response.data.hourly,
        daily: response.data.daily,
        location: {
          latitude: response.data.latitude,
          longitude: response.data.longitude,
          elevation: response.data.elevation
        }
      };
    } catch (error) {
      console.error('‚ùå Erreur m√©t√©o actuelle Open-Meteo:', error);

      // En cas d'erreur, retourner des donn√©es par d√©faut
      console.log('üîÑ Utilisation de donn√©es m√©t√©o par d√©faut');
      const defaultData = this.generateDefaultWeatherData(latitude, longitude);
      return {
        current: defaultData.current,
        hourly: {
          time: [],
          temperature_2m: [],
          precipitation: [],
          wind_speed_10m: []
        },
        daily: {
          time: [],
          temperature_2m_max: [],
          temperature_2m_min: [],
          precipitation_sum: defaultData.daily.precipitation_sum
        },
        location: {
          latitude: latitude,
          longitude: longitude,
          elevation: 300
        }
      };
    }
  }

  // üî• M√âTHODE CORRECTE - Open-Meteo Historical API
  static async getHistoricalWeather(
    latitude: number, 
    longitude: number, 
    startDate: string, 
    endDate: string
  ) {
    try {
      console.log(`üìä R√©cup√©ration donn√©es historiques ${startDate} √† ${endDate}`);
      
      // Validation des dates (Open-Meteo exige le format YYYY-MM-DD)
      const start = new Date(startDate);
      const end = new Date(endDate);
      const today = new Date();
      
      // Open-Meteo Historical API : donn√©es jusqu'√† il y a 2 jours
      const maxHistoricalDate = new Date(today);
      maxHistoricalDate.setDate(today.getDate() - 2);
      
      if (end > maxHistoricalDate) {
        throw new Error(`Donn√©es historiques disponibles jusqu'au ${maxHistoricalDate.toISOString().split('T')[0]} seulement`);
      }

      const response = await weatherAPI.get('https://archive-api.open-meteo.com/v1/archive', {
        params: {
          latitude: latitude.toFixed(6),
          longitude: longitude.toFixed(6),
          start_date: startDate,
          end_date: endDate,
          daily: [
            'temperature_2m_max',
            'temperature_2m_min',
            'precipitation_sum',
            'wind_speed_10m_max'
          ].join(','),
          timezone: 'auto'
        }
      });

      console.log('‚úÖ Donn√©es historiques r√©cup√©r√©es avec succ√®s');
      return response.data;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        if (error.response?.status === 400) {
          console.error('‚ùå Erreur 400 - Param√®tres invalides:', error.response.data);
          throw new Error(`Param√®tres invalides: ${error.response.data.reason || 'V√©rifiez les dates et coordonn√©es'}`);
        }
        console.error('‚ùå Erreur donn√©es historiques Open-Meteo:', error.message);
      }
      throw new Error('Impossible de r√©cup√©rer les donn√©es historiques');
    }
  }

  // üî• CALCUL RISQUE CLIMATIQUE SIMPLIFI√â
  static async analyzeClimateRisk(
    latitude: number,
    longitude: number,
    cropType: string
  ) {
    try {
      console.log(`üå°Ô∏è Analyse des risques climatiques pour ${cropType} √† (${latitude}, ${longitude})`);

      // Essayer d'utiliser les donn√©es m√©t√©o actuelles et pr√©visions
      let currentWeather;
      try {
        currentWeather = await this.getCurrentWeather(latitude, longitude);
      } catch (weatherError) {
        console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer la m√©t√©o, utilisation de donn√©es par d√©faut');
        // Utiliser des donn√©es par d√©faut bas√©es sur la r√©gion
        currentWeather = this.generateDefaultWeatherData(latitude, longitude);
      }

      // Algorithme de risque bas√© sur les donn√©es actuelles
      const riskFactors = {
        temperature: this.calculateTemperatureRisk(currentWeather.current.temperature_2m, cropType),
        precipitation: this.calculatePrecipitationRisk(currentWeather.daily.precipitation_sum, cropType),
        wind: this.calculateWindRisk(currentWeather.current.wind_speed_10m)
      };

      const overallRisk = (riskFactors.temperature + riskFactors.precipitation + riskFactors.wind) / 3;

      console.log('‚úÖ Analyse des risques termin√©e');
      return {
        overall_risk: Math.min(Math.max(overallRisk, 0), 1), // Entre 0 et 1
        factors: riskFactors,
        recommendation: this.generateRecommendation(overallRisk, cropType)
      };
    } catch (error) {
      console.error('‚ùå Erreur analyse des risques:', error);
      // Retourner des donn√©es par d√©faut au lieu de faire planter l'app
      return {
        overall_risk: 0.5, // Risque moyen par d√©faut
        factors: { temperature: 0.5, precipitation: 0.5, wind: 0.3 },
        recommendation: `Surveillance recommand√©e pour votre culture de ${cropType}`
      };
    }
  }

  // G√©n√®re des donn√©es m√©t√©o par d√©faut pour le Burkina Faso
  private static generateDefaultWeatherData(latitude: number, longitude: number) {
    const now = new Date();
    const month = now.getMonth() + 1; // 1-12

    let temperature = 30;
    let precipitation = [0, 0, 0, 0, 0, 0, 0]; // 7 jours

    // Ajustements saisonniers pour le Burkina Faso
    if (month >= 6 && month <= 9) {
      // Saison des pluies
      temperature = 28;
      precipitation = [5, 10, 0, 15, 8, 0, 12];
    } else if (month >= 10 && month <= 2) {
      // Saison s√®che fra√Æche
      temperature = 25;
    } else {
      // Saison s√®che chaude
      temperature = 35;
    }

    return {
      current: {
        temperature_2m: temperature,
        relative_humidity_2m: 50,
        precipitation: 0,
        wind_speed_10m: 10
      },
      daily: {
        precipitation_sum: precipitation
      }
    };
  }

  // Calculs de risque individuels
  private static calculateTemperatureRisk(temperature: number, cropType: string): number {
    const thresholds = {
      'maize': { min: 15, max: 35 },
      'cotton': { min: 20, max: 40 },
      'groundnut': { min: 20, max: 30 },
      'vegetables': { min: 15, max: 25 }
    };
    
    const threshold = thresholds[cropType as keyof typeof thresholds] || thresholds.maize;
    
    if (temperature < threshold.min || temperature > threshold.max) {
      return 0.8; // Risque √©lev√©
    }
    return 0.2; // Risque faible
  }

  private static calculatePrecipitationRisk(precipitationSum: number[], cropType: string): number {
    const recentPrecipitation = precipitationSum.slice(-7).reduce((a, b) => a + b, 0); // 7 derniers jours
    
    if (recentPrecipitation < 5) {
      return 0.9; // S√©cheresse - risque tr√®s √©lev√©
    } else if (recentPrecipitation > 100) {
      return 0.7; // Inondation potentielle - risque √©lev√©
    }
    return 0.3; // Risque normal
  }

  private static calculateWindRisk(windSpeed: number): number {
    if (windSpeed > 50) {
      return 0.8; // Vents forts - risque √©lev√©
    } else if (windSpeed > 30) {
      return 0.5; // Vents mod√©r√©s
    }
    return 0.2; // Vents faibles
  }

  private static generateRecommendation(risk: number, cropType: string): string {
    if (risk > 0.7) {
      return `‚ö†Ô∏è ALERTE: Conditions climatiques d√©favorables pour ${cropType}. Surveillez vos cultures de pr√®s.`;
    } else if (risk > 0.4) {
      return `‚ö° ATTENTION: Conditions m√©t√©o √† surveiller pour ${cropType}. Restez vigilant.`;
    }
    return `‚úÖ FAVORABLE: Conditions climatiques actuelles favorables pour ${cropType}.`;
  }
}
